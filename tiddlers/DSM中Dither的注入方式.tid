created: 20230410080547244
creator: hanassel
modified: 20230411015558396
modifier: hanassel
tags: DSM dither
title: DSM中Dither的注入方式
type: text/vnd.tiddlywiki

|styled-table|k
|!条目信息|
|本条目创建时间：{{!!created}}|
|本条目修改时间：{{!!modified}}|
---
! CIFF中的Dither注入
在DSM中，为了打散量化器的输出pattern，以及抑制idle tone的影响，需要使用到dither，而dither的注入方式可以分为三种。

* 【方法A】在量化器输入端注入
* 【方法B】在第一级积分器输入端与量化器输入端同时注入
* 【方法C】在第一级积分器输出端与量化器输入端同时注入

虽然存在三种注入方式，但是他们对应的所产生的dither注入的传输函数其实是等价的，也就是说，在最终注入的dither起到的作用来看，他们是等价的，但是不同的注入位置的差异则产生了不同的效果。

|! | !注入位置 | !缺点 | !优点 |
|! 方法A| Quantizer输入 | LoopFilter内部信号幅度大 | 仅一个注入点，可以整合到叠加网络sum注入 |
|! 方法B| Int1输入 & Quantizer输入 | 对DSM输入电流存在kickback影响 | LoopFilter内部信号幅度小 |
|! 方法C| Int1输出 & Quantizer输入 | 相比【方法B】需要增加额外的delay单元和传输函数 | LoopFilter内部信号幅度小，对输入无kickback影响 |

!! Dither注入传输函数
接下来针对方法B与方法C的传输函数注入的电路结构进行分析与整理。

!!! 方法B
在方法B中，dither的注入方式其实与一个2nd-order CIFF结构的signal的注入方式保持一致，因此不难推导出对应的d1与d2系数的值。

[img[DSM中Dither的注入方式-方法B.jpg]]

其中d2的系数在Single-bit与Multi-bit下不同的原因是，multi-bit存在一个由于`dynamic range scale`所产生的''系数缩放''。这是为了适应quantizer的输入的参考电压的范围，同时`dynamic range scale`也可以进一步地抑制Loop Filter内部的电压幅度。

| ! | !Single-bit | !Multi-bit |
| !d1 | c1 | c1 |
| !d2 | 1 | Vqref/Vadd |
| !d3 | 1 | 1 |

!!! 方法C
在方法C中，dither在注入到LoopFilter前，还经过了不同的传输函数。


[img[DSM中Dither的注入方式-方法C-01.jpg]]

对于这种方式的理解，将int1输出端注入往前挪可以发现，它其实注入方式可以与【方法B】的in1输入端注入保持一致，只不过在dither注入到DSM中前还经过了 1-Z^^-1^^ 的传输函数。

!!!! 等价结构
如下图所示为在输入端注入的等价结构。

[img[DSM中Dither的注入方式-方法C-02.jpg]]

从上图可知，Dither*(1-Z^^-1^^)*[Z^^-1^^/(1-Z^^-1^^)]即为Dither*Z^^-1^^。本质上两种实现方法C的方式是等效的。

在针对【方法C】的dither注入的传输函数进行计算后可以得知它们的系数(''非''等价结构的系数)。

| ! | !Single-bit | !Multi-bit |
| !d1 | c1 | c1 |
| !d2 | 1 | Vqref/Vadd |
| !d3 | 1 | 1 |

!! 总结
从【方法B】和【方法C】的系数推导中可以看出，它们所需要的dither注入的系数d1/d2/d3的系数是保持一致的，但是它们对于LoopFilter的影响确各不相同，具体见上文表格。

! Double Sampling对dither的影响
当将int1从`delayed integrator`替换为`double sampling integrator`时，如下图所示，它的传输函数发生了改变。

[img[DSM中Dither的注入方式-方法C-01-ds.jpg]]

此时对于dither的注入与消除，便无法得出一个有解的表达式。给出此时在LoopFilter中，dither注入与消除的计算式子如下所示。

> 注入量''(式1-1)''：//Dither*(1-Z^^-1^^)*d2*(-c1)*[(1+Z^^-1^^)/(1-Z^^-1^^)]//
> 消除量''(式1-2)''：//Dither*Z^^-1^^*d1//
> ''(式1-3)''=(式1-1)+(式1-2)=//Dither*d2*(-c1)*(1+Z^^-1^^)+Dither*Z^^-1^^*d1//

而为了消除LoopFilter内的dither量，即需要保证''(式1-3)''为0，此时d1与d2无非零解。

!! 问题
针对double sampling引入的情况，存在以下疑问：

# 在使用`double sampling`时，如何计算dither的各项系数
# 在simulink中除了等效地将c1/b1系数翻倍，如何实现`double sampling`的传输函数(1+Z^^-1^^)/(1-Z^^-1^^)